Lasse Fister

The Multitoner: High quality grayscale image reproduction

– details

Duo-/Tritone etc. are techniques used for high quality reproduction of grayscale images in i.E. offset printing, essentially it widens the gamut of the output device. A tool to create such 'multitone' images did not exist as FLOSS, so I wrote the Multitoner. I will describe how our need for the multioner emerged, explain some technical highlights of the implementation and show a demo of the tool.

I studied Visual Communication at the Bauhaus-Uni Weimar and work as a freelance software engineer. I do some libre graphics software projects: besides the type-design related library ‘ufoJS’ we started a project to create high quality books using exclusively FLOSS: https://silber-und-blei.com
graphicore.de



Ankündigung:

I will describe how our need for the multioner emerged

explain some technical highlights of the implementation

show a demo of the tool.



Plan:

Einleitung
==========
Ich: Kurzvorstellung (zwei Sätze)
Silber und Blei: Kurzvorstellung
    Projekt Bildband/Fotografie Friedhofsengel
Drucktechnik: Kurzexkurs, Entscheidung triplex Grund: Gammut erklären (ein vergleichsbild wäre gut)
Problem: Photoshop kann "Duotone", aber als FLOSS gabs/gibts das nicht

Bridge Hauptteil:
   - Multitoner ich hab PS-Duotone-Feature für FLOSS implementiert
   - funktioniert halb/dreiviertel
        - bilder können schon zum drucker geschickt werden
        - kein colormanagement / softproof: trial and error …
   - wo probleme aufgetreten sind
   - wo hilfe benötigt wird


Hauptteil
=========
Kurze Zusammenfassung der Entwicklungsarbeit bis jetzt
   - geschaut wie photoshop das macht => eps
   - photoshop EPS reduziert auf das nötigste -- viel code entfernt, dafür angefangen PostScript zu lernen
       - 
   - hier die Idee mit direkter gs-vorschau zu arbeiten kurz vorstellen. InDesign macht das auch.
   
   - python-ghostscript bindings erweitert
         "gs" befehl zum testen nach python portiert
         wird leider nicht vom entwickler übernommen
   - GTK+ 3 Gui in Python mit PyGObject geschrieben.
       - Aufwändigere Widgets: Kurveneditor, Preview Window

Vorfürung:
   - Aufmachen, erklären, was man sieht
       - Vorbereitetes Projekt mit linear schwarz öffnen (ich hab da mal was vorbeitet)
       - Vorschaubild Laden (man macht ja ein Profil mit dem man mehrer Bilder konvertieren kann, das hängt nicht an einem bild …)
       - Bedienelemente erklären
       ====> Reihenfolge herausfinden! ====>
           - Tinten Namen/Prozessfarbennamen
           - cmyk, weil Farbfächer CMYK angaben haben, als ausgangspunkt
           - Position der Farbverläufe zum Kurveneditor
             Eingabe Ausgabe, Quelle links Weiß, rechts Schwarz
           - Kurvenarten
           - Farben hinzufügen/definieren (Ink Setup)
           - Farben sortieren, verstecken, sperren (lock), kurven färben, 
           - Tabs
           - undo/redo
           - Preview Window
           - Bild Exportieren als EPS
           - Commandline Interface (als Möglichkeit eine Stapelverarbeitung umzusetzen)
           - nochwas ?
       <==== Ende: Reihenfolge herausfinden! <====
Workflow/Fiktiv
  - workflow ein bild RAW -> Darktable (oder so) -> ggf. GIMP -> Multitoner (=>EPS) -> Context (=>PDF) -> Printshop
  - workflow Farbprofile 
  - mehrere Bilder für ein Projekt(Buch) vorbereiten
    Hier Wichtig: beim gleichen Projekt bleiben Farben und Reihenfolge immer gleich,
                  was sich aber je Bild ändern kann: Kurven und Ob die Farben überhaupt verwendet
                  werden (wenn ich das soweit richtig verstanden habe)
                  Damit sind die Kurven ein wichtiges Gestaltungsmittel für einen Printworkflow,
                  sonst würde ja auch Gimp reichen.
Ausblick
========
Akut: Colormanagement, was muss gemacht werden:
   1. gs Bug => Blocker (sDeviceNProfile) => DAs kann ich nicht allein machen
        - Falls das mit GS nichts wird muss das Konzept vielleicht nochmal geändert werden
          und ein anderes Backend für die Vorschau verwendet werden
   2. Herausfinden ob und wie man geeignete Profile rankommt (können Druckereien das herstellen?)
      Überhaupt könnte ich ab und zu Beratung bei der Farbmanagement-Geschichte gebrauchen, falls sich
      da jemand auskennt, gerade auch im Echten leben mit Druckereien etc.
   3. Interface und ggf. Datenmodell anpassen (linke Seite: Color-Profile Seite)
   4. Interface an Workflow anpassen, falls das dann nötig ist
Weiterentwicklungsmöglichkeiten:
   - Ausbaufähigkeit, z.B. andere Möglichkeiten Multitone (DeviceN) Bilder herzustellen
       - Bsp. mehrere Eingangskanäle, statt nur einem? Aufwändiger, aber auch mächtiger
       - PostScript unterstützt 14 Bit farbtiefe AFAIK … das könnte man ja auch unterstützen
       - deviceCMYK statt deviceN nehmen für grayscale reproduction (poor mans Multitone …)
         bzw. Testen ob gängige CMYK Profile mit Ghostscripts sDeviceNProfile verwendbar sind
       - sowas wie Hexachrome
   - Falls es weitere Lücken auf der FLOSS-Seite gibt könnte man die schließen
   - Der Ansatz, EPS direkt zu verwenden, könnte weiter erkundet werden. Vielleicht kann man
     da interessante Anwendungen finden
Leute zum Mitmachen anregen/auffordern
Nochmal wichtig: Ghostscript Bug Hilfe und Colormanagenent-Know-How brauchts
Websites: github, fraphicore, silber und blei
          twitter ich, twitter silber-und-blei
Fragen

  



Plan:

Einleitung
==========
Hi my name is Lasse. I'm here to introduce the Multitoner. That’s a tool that I started to write last year to fill a gap in the FLOSS toolchain that I encountered. I'll start with the story that led to the development of the Multitoner Tool, describe the original problem it tries to solve, tell you what happend so far and then go over to a presentation of the software itself. Then I'm going to introduce the workflow that I imagine might become ours and probably is a general enough approach for others, too. At the end I'm going to tell you what needs to happen next and where further work has to be done.

All that in 15 minutes, so fasten your seatbelt and get ready. If you have any questions, please ask them right away so I can answer in the right context. I hope I'll have some time left at the end of the presentation for further questions or we can meet in the lobby if you want to chat with me directly.



Kurzvorstellung (zwei Sätze)

ME
graphicore
I'm earning my money as a Freelance Software-Engineer mostly for Web-Applications before that I studied Visual Communication at the Bauhaus Univerity in Weimar, that is essentially Graphic Design. I had an emphasis on concept-development, layout and typography. Doing mainly programming work in my day-to-day business I kind of miss the design-for-paper work sometimes.

US silber und blei

My partner, Anne Karg, is trained photographer, writer and geographer. It felt very natural for us to decide making books together. Therefore we founded our label Silber & Blei. The name is German for "Silver & Lead". Silver stands for the silver salts that where (or are) used in analog(or chemical) photography to provide the light sensitivity of the film. Lead stands for the metal that is used in typesetting. We say we are the alloy of silver and lead to make good Photography Books.
The reason for me beeing here is that we decided to make our Books exclusivley using free/libre open source software, at the cost of creating the missing parts ourselves.

printing technology and gamut

When researching printing technology we found out that the key for really good grayscale image reproduction is using more than just one ink—think of black ink here obviously.

How many are familiar with the term duotone (deutsch: duplex) or tritone (deutsch: triplex). And how many of you know what it’s good for?

The main problem is that in printing one ink can represented approximately 60 different colors/shades, that’s called its Gamut: the range/amount of different colors a device can display. Coming from computer monitors that display in good cases around 256 different shades of gray 60 colors reproduced on paper look dull and not brilliant at all. In fact the image looses a lot of its depth. Especially in the darker range all color suddenly becomes just black and a lot of detail is lost.

The counter measure for this is spreading the colors of an image over several inks in printing. Usually One would use a black ink for the dark areas and a lighter ink for the gray areas. Using two inks to reproduce one image is called duotone. If you use 3 inks its tritone and with 4 its quadtone. Using more colors for grayscale image reproduction is very uncommon AFAIK, so there is not really a name like "pentatone" defined in the area of printing, although it is possible. I use the term multitone to summarize this. All multitone prints have in common that they should capture more photographic detail than using just one color. Another aspect is that by using different colors than just shades of gray the tint/colouring of the reproduction can be defined and so more artistic statements can be made.

We decided to use a multitone process to reproduce the photos in our first book. But our research showed that there was no single open source tool to create such data. The best known tool in the proprietary world is the "duotone" feature of photoshop. The Multitoner is essentially an Open Source implementation of the Photoshop feature. It’s around half complete from what I wan't it to be. What works is creating eps files that should work fine with a good printshop. The user interface is very complete for the current state. The big thing missing is good colormanagement using icc-profiles, to display preview images as close as possible to the resulting print. Right now the displayed preview is just a rough guess on how your result may look at the end. This is unfortunately an area where I'm stuck a little and where I need some help. The biggest problem for me is waiting for the ghostscript project to sort out a bug that blocks me and having to find out all about the colormanagement process for this project myself.

But right know I'm going to tell you what happened so far:

What I did first was studying an output file of the adobe photoshop duotone feature. These files happen to be exported as eps-images. EPS stands for Encapsulated PostScript. PostScript is a Programming Language intended for programming of -- printing devices (laserprinters and such). EPS files can be opened and read with every text editor. The Language Manual is freely available and there is an open source interpreter for the PostScript language, called ghostscript (probably everybody knows). I learned enough PostScript to figure out what is going on in the files produced by Photoshop. It turned out that the key to Multitone-EPS files is the so called "Device N". A structure defining an output device with an amount of N different Inks. (Other devices are DeviceRGB for Computer-Monitors or DeviceCMYK for process color printing and devices for other colorspaces as well.) I ended with a minimal template of what is needed to define Multitone images using eps.

Then I wrote the application using Python 2.7 and GTK+ 3 via PyGObject, numpy with scipy for the curves of the Curve-Editor Widget and since my aim was to generate eps files I decided to use ghostscrip directly to render the preview images. For that purpose I had to add a part of the ghossctipt c-api to the the python-ghostscript c-bindings. Also because of its colormanagemet facilities using ghostscript directly seemed like a good idea. However, it feels like I'm the first one to test the device N colormanagement of ghostscript, so that's a bit of a bummer.

Let me show you the Multitoner in a live demonstration, to explain the user interface ...

I prepared a very simble profile to start with, using just Black ink.

multitoner Öffnen mit black linear.mtt

Since a Multitoner Profile can be used with any image a preview image has to be opened separately:
Ein Vorschaubild von uns öffnen Bild von uns … 

You can open multiple preview windows simultaniously and you can open multiple multitoner projects simultaniously, too.
// open 

This is the main interface of the multitoner.

Add and define a color.

To define our printing device, we first need to define the colors to be used. Beeing in a pre-color-management phase this needs to happen manually. So I first add a new ink and then define its properties in the "ink setup". The ink first needs a name and then gets its color properties specified via CMYK. I used CMYK because a RAL or Pantone swatchbook will usually give you cmyk abstractions. (Lab would be good, too and I might add it in the future.)  In-names may be choosen freely usually its the name of the ink to be used in the end. For names there is the exception, that the names of the process colors "Cyan" "Magenta" "Yellow" and "Black" don't need a color setup. Postscript knows these color names and so I inherited this for the Multitoner. Think of Pantone names or something like this for the other colors.

The colors can be arranged using Drag an Drop in the table on the upper right side. The printed inks will be applied in the reverse order defined here. So the ink at the botttom of the table is going to be at the bottom of the printed result, because its applied first. I'm not shure if I will keep it this way, maybe this is too confusing. However, the rule is to print lighter colors first, so lighter colors should go to the bottom of the table.

Here are other controls for the inks, too. The eye is to temporarily hide a color. The lock is used to remove the control points from the curve editor. If a control point of one curve is overlaying other control points it can be locked here, so the other control points become accessible again. The color swatch is used to set the color used in the curve editor--so its possible to distinguish the different curves. 

On the right side each ink is represented as the output it produces for white input on the left side to dark input on the right side. Below follows the resulting gradient of all inks combined.

On the lower right is the curve editor that lets you define how much of an ink is used for each input value. So if I want to use a lot of (this green color) for the white areas of my image, you'll have to take a control point of this color and drag it to the upper left corner. 

Control points can be added by clicking somewhere on a curve and can then be dragged anywhere. To remove a control point you must press control while clicking on the point.

The values between control points are interpolated using different methods. You can choose these using the "Curve Type" select box from the Ink Setup. Linear is just straight linear interpolation, the spline curve is the smoothest curve and Monotone Cubic behaves a little bit like inbetween Linear and Spline and might be a good compromise for most users.

A reasonable general tritone profile might look like this:
(opne prepared profile)
 Black is fading out fast, the mid tone Cool Gray is almost linear and the light gray is very present in the darker area and fading out late, so it the image a warmer tone.

To finally create an eps file it has to be opened as preview image and can be exported from there as eps. There is another way to create eps files using the commandline. That can be used to automate the process.


I'll try to describe the workflow that I imagine in that the multitoner is being used. There are two phases I can think of: Pre-production and production. In the pre-production phase we try to create the look and feel of the images we are going to print, its the more artisitc phase. The pre-production phase would end with a set of colors we are about to use. Now we let the print shop create a color profile from the colors we defined. The printshop would have to print a color swatch sheet and take measurements of the result and finally provide us an ICC-Profile. In the production phase we would use the provided profile to create the files that are going to be printed. We would use only one profile for all images that go into the book, but the curves of the multitoner profile might still change on an per image base.

The toolchain for the images of our book is like this:
Photo Source (RAW from camera or scans)-> darktable or another RAW-Processor -> gimp if needed (facelifting) -> multitoner -> context ->  pdf


Whats next:

Currently I'm waiting for a response of the ghostscript project. I filed a bug for their -sDeviceNProfile option, but still have no answers. When there is a working example of color management using ghostscript the next steps are adjustments for interface and datamodel, to be able to load and use the color profiles.
Also I'll have to care about a print shop that is able to create creaete profiles for our multitone devices and see what is needed by a print shop for the sourcing of color-profiles. I actually would be happy to have some advice with this, because I'm doing this the first time. I think a result could be a manual to help print shops and multitoner users with this step. Having a first profile we'll likely do the first print job for testing. I'm looking forward for this. If you happen to know a print shop that would like to participate in the development of the multitoner and ideally is located in germany, please drop me a message.

Whats after next:

There are other options to create this kind of images, so instead of creating different color channels using transformation functions/the curves it might be an option to provide the colorchannels directly. Another good feature would be to automatically create the best separation for a given device and image using some kind of magic.

We might be able to optimize the pre print process for coloured images as well, using spot-colors to enhance the cmyk gammut or to achieve more artistic effects. I'm open things like this and there are working examples like Hexachrome that already do this.
If there are other gaps in FLOSS that would fit under the umbrella of the multitoner, we could implement these.
And I'd love to implement new ideas or help with the implementation as part of the multitoner.

If someone likes the project and needs some inspiration where to help, there are plentiful options, too.
First, I don't care myself for windows or mac support. If someone likes to see this software for one of these operating systems I'd support your initiative.
Packaging at least for PyPI - Python Package Index would be cool, but I don't think I have the time to do this soon.
Besides documentation for the multitoner more general knowledge about the printing process with open source tools would be great. Lastly, to help people to work with the multitoner, an open library of colorprofiles would be cool. It might be helpful with getting started. Adobe photoshop provides some setup files with its duotone feature, something like that might be great.

Lastly, i'd like to stress that if anyone can help with the ghostscript problem I'm having, that would be great, it's my number one blocker at the moment.

Here are the relevent websites and conatct information. Thank You.





Ich: Kurzvorstellung (zwei Sätze)
Silber und Blei: Kurzvorstellung
    Projekt Bildband/Fotografie Friedhofsengel
Drucktechnik: Kurzexkurs, Entscheidung triplex Grund: Gammut erklären (ein vergleichsbild wäre gut)
Problem: Photoshop kann "Duotone", aber als FLOSS gabs/gibts das nicht

Bridge Hauptteil:
   - Multitoner ich hab PS-Duotone-Feature für FLOSS implementiert
   - funktioniert halb/dreiviertel
        - bilder können schon zum drucker geschickt werden
        - kein colormanagement / softproof: trial and error …
   - wo probleme aufgetreten sind
   - wo hilfe benötigt wird


Hauptteil
=========
Kurze Zusammenfassung der Entwicklungsarbeit bis jetzt
   - geschaut wie photoshop das macht => eps
   - photoshop EPS reduziert auf das nötigste -- viel code entfernt, dafür angefangen PostScript zu lernen
       - 
   - hier die Idee mit direkter gs-vorschau zu arbeiten kurz vorstellen. InDesign macht das auch.
   
   - python-ghostscript bindings erweitert
         "gs" befehl zum testen nach python portiert
         wird leider nicht vom entwickler übernommen
   - GTK+ 3 Gui in Python mit PyGObject geschrieben.
       - Aufwändigere Widgets: Kurveneditor, Preview Window

Vorfürung:
   - Aufmachen, erklären, was man sieht
       - Vorbereitetes Projekt mit linear schwarz öffnen (ich hab da mal was vorbeitet)
       - Vorschaubild Laden (man macht ja ein Profil mit dem man mehrer Bilder konvertieren kann, das hängt nicht an einem bild …)
       - Bedienelemente erklären
       ====> Reihenfolge herausfinden! ====>
           - Tinten Namen/Prozessfarbennamen
           - cmyk, weil Farbfächer CMYK angaben haben, als ausgangspunkt
           - Position der Farbverläufe zum Kurveneditor
             Eingabe Ausgabe, Quelle links Weiß, rechts Schwarz
           - Kurvenarten
           - Farben hinzufügen/definieren (Ink Setup)
           - Farben sortieren, verstecken, sperren (lock), kurven färben, 
           - Tabs
           - undo/redo
           - Preview Window
           - Bild Exportieren als EPS
           - Commandline Interface (als Möglichkeit eine Stapelverarbeitung umzusetzen)
           - nochwas ?
       <==== Ende: Reihenfolge herausfinden! <====
Workflow/Fiktiv
  - workflow ein bild RAW -> Darktable (oder so) -> ggf. GIMP -> Multitoner (=>EPS) -> Context (=>PDF) -> Printshop
  - workflow Farbprofile 
  - mehrere Bilder für ein Projekt(Buch) vorbereiten
    Hier Wichtig: beim gleichen Projekt bleiben Farben und Reihenfolge immer gleich,
                  was sich aber je Bild ändern kann: Kurven und Ob die Farben überhaupt verwendet
                  werden (wenn ich das soweit richtig verstanden habe)
                  Damit sind die Kurven ein wichtiges Gestaltungsmittel für einen Printworkflow,
                  sonst würde ja auch Gimp reichen.
Ausblick
========
Akut: Colormanagement, was muss gemacht werden:
   1. gs Bug => Blocker (sDeviceNProfile) => DAs kann ich nicht allein machen
        - Falls das mit GS nichts wird muss das Konzept vielleicht nochmal geändert werden
          und ein anderes Backend für die Vorschau verwendet werden
   2. Herausfinden ob und wie man geeignete Profile rankommt (können Druckereien das herstellen?)
      Überhaupt könnte ich ab und zu Beratung bei der Farbmanagement-Geschichte gebrauchen, falls sich
      da jemand auskennt, gerade auch im Echten leben mit Druckereien etc.
   3. Interface und ggf. Datenmodell anpassen (linke Seite: Color-Profile Seite)
   4. Interface an Workflow anpassen, falls das dann nötig ist
Weiterentwicklungsmöglichkeiten:
   - Ausbaufähigkeit, z.B. andere Möglichkeiten Multitone (DeviceN) Bilder herzustellen
       - Bsp. mehrere Eingangskanäle, statt nur einem? Aufwändiger, aber auch mächtiger
       - PostScript unterstützt 14 Bit farbtiefe AFAIK … das könnte man ja auch unterstützen
       - deviceCMYK statt deviceN nehmen für grayscale reproduction (poor mans Multitone …)
         bzw. Testen ob gängige CMYK Profile mit Ghostscripts sDeviceNProfile verwendbar sind
       - sowas wie Hexachrome
       - automatische "best fit" kurven durch farbkonvertierung zwischen eingabe und ausgabe profil?
   - Falls es weitere Lücken auf der FLOSS-Seite gibt könnte man die schließen
   - Der Ansatz, EPS direkt zu verwenden, könnte weiter erkundet werden. Vielleicht kann man
     da interessante Anwendungen finden
Leute zum Mitmachen anregen/auffordern
  - windows mac support
  - packaging
  - documentation, information about print processes
  - library of colorprofiles?
Nochmal wichtig: Ghostscript Bug Hilfe und Colormanagenent-Know-How brauchts
Websites: github, fraphicore, silber und blei
          twitter ich, twitter silber-und-blei
Fragen

  


